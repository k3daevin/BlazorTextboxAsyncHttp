@inject ILogger<TextInput> Logger
@inject IJSRuntime JSRuntime;


<h3>TextInput</h3>

<div contenteditable="true" @oninput="OnInput" @ref="DivElement" class="border"></div>

@code {
    public string Content { get; private set; } = string.Empty;

    [Parameter]
    public EventCallback OnInputFinished { get; set; }

    private ElementReference DivElement;

    private System.Timers.Timer _timer = new System.Timers.Timer(500) //500ms
        {
            AutoReset = false,
            Enabled = false,
        };

    public async Task ResetAsync()
    {
        await JSRuntime.InvokeVoidAsync("setElementContent", DivElement, "");
        await InvokeAsync(StateHasChanged);
    }


    protected override Task OnInitializedAsync()
    {
        _timer.Elapsed += ElapsedEventHandler;

        return base.OnInitializedAsync();
    }

    private async void ElapsedEventHandler(object? sender, System.Timers.ElapsedEventArgs e)
    {
        var content = await JSRuntime.InvokeAsync<string>("getElementContent", DivElement);
        Logger.LogInformation(content);
        Content = content;
        await OnInputFinished.InvokeAsync();
    }

    private void OnInput(ChangeEventArgs args)
    {
        _timer.Stop();
        _timer.Start();
    }
}
